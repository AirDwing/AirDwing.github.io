<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AirDwing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.airdwing.com/"/>
  <updated>2019-01-04T04:49:33.394Z</updated>
  <id>http://blog.airdwing.com/</id>
  
  <author>
    <name>AirDwing Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Willin: 大翼航空：云上自动化测试与持续集成实践</title>
    <link href="http://blog.airdwing.com/posts/2019/willin-aliyun-practice/"/>
    <id>http://blog.airdwing.com/posts/2019/willin-aliyun-practice/</id>
    <published>2019-01-03T06:38:30.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大翼航空：云上自动化测试与持续集成实践"><a href="#大翼航空：云上自动化测试与持续集成实践" class="headerlink" title="大翼航空：云上自动化测试与持续集成实践"></a>大翼航空：云上自动化测试与持续集成实践</h1><h2 id="公司简介"><a href="#公司简介" class="headerlink" title="公司简介"></a>公司简介</h2><p>大翼航空成立于2015年，致力于无人机及其应用管理平台的研发、销售和服务，是DJI大疆创新系统集成商、senseFly授权经销商。</p><p>公司主营自主研发的“风筝线”无人机管理系统，将无人机视作空中物联网平台。“风筝线”系统注重空中数据的精准采集、智能分析与实时呈现。在“一云一网一图”的框架和成熟飞行平台的基础上，着力于应用软件的研发，打造包含采集、分析与展示的“端到端”一体化解决方案，帮助客户进行高效的分析及决策，满足行业需求。</p><p>目前，我公司的无人机云系统和服务已经为公安、消防、环保、农业等客户带来较大的效率提升，也在 “智慧城市”中展现了极大价值。随着无人机技术的成熟，网络通信技术的发展，传感器等负载的多样化，未来将应用于更多行业。</p><a id="more"></a><h2 id="原始架构"><a href="#原始架构" class="headerlink" title="原始架构"></a>原始架构</h2><p>“风筝线”无人机云系统，包括“无人机”和“云系统”两大部分。其中：</p><ul><li>“无人机”部分，包括硬件（飞机+摄像头+传感器）、固件、软件。软件作为控制中枢，（通过固件）负责：（1）从云服务器接受指令；（2）向无人机发送指令；（3）从传感器手机数据；（4）将数据回传云服务器。</li><li>“云系统”部分，主要是服务器，包括：（1）通讯服务器，负责与无人机软件交互；（2）数据库服务器，持久化数据；（3）web服务器，运行实时监控和管理系统；（4）视频服务器，接受无人机软件的推流并传递给实时监控。</li></ul><p>整体架构图如下：</p><p><img src="https://user-images.githubusercontent.com/1890238/50625434-2052ff80-0f63-11e9-94b4-e51c902f77ad.jpg" alt="架构图"></p><h2 id="特殊性及方案"><a href="#特殊性及方案" class="headerlink" title="特殊性及方案"></a>特殊性及方案</h2><p>看似并不复杂的总体结构，实施时还是会遇到一些困难。这主要是由于无人机这一特殊载体决定的。</p><ul><li>流量集中在白天，尤其是工作时间，晚上几乎没有任何流量。</li><li>流量的波动非常大，波峰时有数百上千架飞机同时传送数据，波谷时可能只有数架甚至没有。</li><li>数据传输主要通过4G网络，网络状况可能不稳定。</li><li>传输的位置、状态等数据频次高、体积小。</li><li>部分情况下，要求拍摄视频并同步传输到实时监控。</li></ul><p>经过认真调研，采取的方案为：</p><ul><li>手机软件与通讯服务器的协议为 MQTT ，而非常规的 TCP/UDP 。MQTT 适用于在网络不稳定的情况下，多频次传输少量数据。</li><li>通讯服务器使用消息队列，初级阶段使用 Redis 模拟消息队列。后续随着流量的增长，将使用 Kafka 等专业消息队列软件。</li><li>手机软件与通讯服务器使用 socket 建立长连接，并允许中断，中断后可续传。</li><li>视频拍摄后，直接保存到手机中，只在网络情况良好时，才上传到视频服务器。</li></ul><p>考虑到以上的诸多特殊性，“风筝线”使用 Node.js 作为开发语言，主要原因是：</p><ul><li>Node.js 特别适用于高并发的情况</li><li>前后端统一，便于减少开发的复杂度。</li></ul><p>在服务器的使用上，从一开始就没有决定自建服务器，主要是自建服务器需要大量的维护成本，这对于初创公司来说并不是一件轻松的事情。<br>因此，通用服务器、数据库、Redis 、CDN 等均直接购买了阿里云的服务。</p><p>阿里云除了商业服务外，还提供一些免费的工具，例如：CI工具 CodePipeline 。</p><p>阿里云CodePipeline是一款提供持续集成/持续交付能力，并完全兼容Jenkins的能力和使用习惯的SAAS化产品。通过使用阿里云CodePipeline，可以方便的在云端实现从代码到应用的持续集成和交付，方便快速的对产品进行功能迭代和演进。<br>尤其是，CodePipeline 支持的数种语言中恰好包含 Node.js 。只要开发人员将代码上传到 git 服务器的 master 分支，就会自动触发构建和测试过程，测试通过后，自动部署到CDN。</p><h2 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h2><p>在2017年，考虑到国际化业务的可能性需要，购买了境外某Paas服务。实际运行了大半年后发现，访问境外服务器有比较严重的延迟，对于业务有比较严重的影响。因此，在考察了国内各家 Paas 之后，我们选择了阿里云。</p><p>选择阿里云是基于如下几个方面的考虑：</p><ul><li>市场评价：阿里云属于云服务商的第一梯队。</li><li>服务的可靠性和稳定性：阿里云拥有为淘宝等超大型网站服务的经验。</li><li>基础组件的完备性：如核心的RDS数据库支持，Redis以及MQ等等这些服务。阿里云拥有这一系列非常丰富的产品，其基础组件的产品线也非常完善。</li></ul><h3 id="新架构"><a href="#新架构" class="headerlink" title="新架构"></a>新架构</h3><p><img src="https://user-images.githubusercontent.com/1890238/50626176-b4bf6100-0f67-11e9-85e0-22ed70358811.jpg" alt="1-1"></p><p>首先，我们采用了前后端完全分离的方式。</p><p>网站、系统的前端部分采用 OSS（对象存储）+ CDN（全站加速）完全静态化的托管到阿里云上。</p><p>后端服务，部分沿用原有的方式，用多台虚拟服务器 + SLB（负载均衡）进行访问控制；部分采用函数计算（Severless 架构）进行尝试。</p><p>完整架构如下：</p><p><img src="https://user-images.githubusercontent.com/1890238/50674197-e8a98d80-101e-11e9-8ad9-9d7a953c82aa.png" alt="1-2"></p><p>第一阶段使用的产品如下： </p><ol><li>ECS用于系统接口，数据传输存储系统。</li><li>OSS用于存储上传气象图，APP软件等。 </li><li>Redis服务器用于缓存请求，记录临时信息，通知事件。</li><li>MySQL用于存储组织，人员，设备信息，以及系统中其他飞行相关信息。</li><li>VOD服务器用于存储及点播飞行录像。</li><li>CDN用于缓存分发访问量较大的资源。 </li><li>DYS用于通知用户注册以及使用情况。</li><li>VPN网关用于服务器分组，端口过滤。 </li><li>SLB用于各个服务器均衡负载。 </li></ol><p>后续计划使用的产品如下： </p><ol><li>高防IP，云防火墙，台式感知和安骑士用于安全需求。 </li><li>机器学习部分用于拍摄的影像学习。 </li><li>数据可视化用于采集到的数据的直观展示。 </li><li>消息队列用于可靠的事件处理。 </li><li>Iot物联网服务用于更高强度的设备接入。</li></ol><h3 id="自动化测试与持续集成"><a href="#自动化测试与持续集成" class="headerlink" title="自动化测试与持续集成"></a>自动化测试与持续集成</h3><p>之前我们的自动化测试采用的是 Git 钩子方式，在 PreCommit 阶段进行，这样的话有一个问题，我们自己的开发电脑配置并不高，随着测试用例的增加，每次测试时间越来越长，严重影响了开发效率。所以我们决定将测试放到提交后执行。</p><p><img src="https://user-images.githubusercontent.com/1890238/50626177-b4bf6100-0f67-11e9-867d-d0bb977b8a0d.jpg" alt="1-2"></p><h3 id="CodePipeline-配置"><a href="#CodePipeline-配置" class="headerlink" title="CodePipeline 配置"></a>CodePipeline 配置</h3><ul><li>首先，配置源码管理，确定需要构建的代码仓库及代码分支</li><li>配置构建触发器，当提交 Pull Request 的时候，触发执行</li><li>构建脚本执行测试 <code>npm test</code></li><li>如果为前端项目，还需要执行 Webpack 构建 <code>npm run build</code></li><li>如果测试失败或构建失败，停止并通知</li><li>如果为前端项目，构建成功后上传至 OSS Bucket</li><li>如果为后端项目，执行远程服务器热更新脚本 <code>ssh -o StrictHostKeyChecking=no  [忽略参数] &quot;NODE_ENV=production node /PATH/ci&quot;</code></li><li>构建结果通过钉钉通知到开发群</li></ul><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p>由于负载均衡器后有多台服务器，所以当其中一台停止更新时，流量会比自动引到其他的服务器上。</p><p>热更新脚本会顺序执行以下操作：</p><ul><li>记录 Commit Hash，方便回滚</li><li>更新代码</li><li>更新依赖包</li><li>PM2 热重启当前服务器下的服务进程</li></ul><p>在构建过程中，除了 CodePipeline 会通知构建的结果以外，阿里云监控系统会针对整个服务的健康状态进行监控，发生异常时通过短信进行报警。我们可以通过准备好的回滚方案进行一键回滚。</p><p>整个持续集成的过程中几乎不再需要任何人工的干预。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大翼航空：云上自动化测试与持续集成实践&quot;&gt;&lt;a href=&quot;#大翼航空：云上自动化测试与持续集成实践&quot; class=&quot;headerlink&quot; title=&quot;大翼航空：云上自动化测试与持续集成实践&quot;&gt;&lt;/a&gt;大翼航空：云上自动化测试与持续集成实践&lt;/h1&gt;&lt;h2 id=&quot;公司简介&quot;&gt;&lt;a href=&quot;#公司简介&quot; class=&quot;headerlink&quot; title=&quot;公司简介&quot;&gt;&lt;/a&gt;公司简介&lt;/h2&gt;&lt;p&gt;大翼航空成立于2015年，致力于无人机及其应用管理平台的研发、销售和服务，是DJI大疆创新系统集成商、senseFly授权经销商。&lt;/p&gt;
&lt;p&gt;公司主营自主研发的“风筝线”无人机管理系统，将无人机视作空中物联网平台。“风筝线”系统注重空中数据的精准采集、智能分析与实时呈现。在“一云一网一图”的框架和成熟飞行平台的基础上，着力于应用软件的研发，打造包含采集、分析与展示的“端到端”一体化解决方案，帮助客户进行高效的分析及决策，满足行业需求。&lt;/p&gt;
&lt;p&gt;目前，我公司的无人机云系统和服务已经为公安、消防、环保、农业等客户带来较大的效率提升，也在 “智慧城市”中展现了极大价值。随着无人机技术的成熟，网络通信技术的发展，传感器等负载的多样化，未来将应用于更多行业。&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="dev" scheme="http://blog.airdwing.com/tags/dev/"/>
    
      <category term="fe" scheme="http://blog.airdwing.com/tags/fe/"/>
    
      <category term="be" scheme="http://blog.airdwing.com/tags/be/"/>
    
  </entry>
  
  <entry>
    <title>Willin: 使用 OS X 进行高效 JS 前后端开发</title>
    <link href="http://blog.airdwing.com/posts/2018/willin-osx-nodejs-env/"/>
    <id>http://blog.airdwing.com/posts/2018/willin-osx-nodejs-env/</id>
    <published>2018-01-14T23:45:53.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高效工具"><a href="#高效工具" class="headerlink" title="高效工具"></a>高效工具</h2><ul><li>Brew： 用于安装各类 *nix 依赖包和应用</li><li>dnsmasq： Localhost下的泛域名指定（Brew 安装）</li><li>LaunchRocket： Brew 应用 GUI 管理工具（Brew Cask 安装）</li><li>iTerm + Oh My Zsh!： 高效 Shell 工具</li><li>iStat Menus：系统监控</li><li>CheatSheet： 按住 <code>⌘ command</code> 不放弹出快捷键菜单</li><li>Moom： 窗口分屏工具</li><li>iHosts： 本地域名解析管理工具</li><li>RescueTime： 记录每天你到底只tm专注工作了几分钟（胆小勿入）</li></ul><a id="more"></a><h2 id="IDE-配置"><a href="#IDE-配置" class="headerlink" title="IDE 配置"></a>IDE 配置</h2><h3 id="VS-Code-插件"><a href="#VS-Code-插件" class="headerlink" title="VS Code 插件"></a>VS Code 插件</h3><ul><li>Auto Close Tag：用于前端 HTML 模板</li><li>Auto Rename Tag：用于前端 HTML 模板</li><li>Can I Use：前端兼容性检测</li><li>EditorConfig for VS Code： 必装</li><li>ESlint： 必装</li><li>Git Lens： git 辅助工具</li><li>Path Intellisense： 引用路径智能提示</li><li>TODO Highlight： 见字如面</li><li>Vetur： 用于前端 Vue 项目</li><li>vscode-proto3： 用于 ProtoBuf 项目</li></ul><p>不推荐安装过多插件，多余插件不仅影响 IDE 速度，更可能造成冲突。建议只开启几个必须的插件，其他如 Vetur 只在特定项目内开启即可。</p><h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><p>只提出了一些关键的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将设置放入此文件中以覆盖默认设置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 编辑器自带的配置也需要设置，避免与 EditorConfig 冲突</span></span><br><span class="line">  <span class="string">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"editor.insertSpaces"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 实时格式化</span></span><br><span class="line">  <span class="string">"editor.formatOnType"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 迷你地图</span></span><br><span class="line">  <span class="string">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 折行</span></span><br><span class="line">  <span class="string">"editor.wordWrap"</span>: <span class="string">"on"</span>,</span><br><span class="line">  <span class="string">"extensions.autoUpdate"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 文件自动保存</span></span><br><span class="line">  <span class="string">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">  <span class="string">"files.autoSaveDelay"</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">// 左侧资源管理器隐藏以下文件/目录</span></span><br><span class="line">  <span class="string">"files.exclude"</span>: &#123;</span><br><span class="line">    <span class="string">"**/.git"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/.svn"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/.hg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/.DS_Store"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/bower_components"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/tmp"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/vendor"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/node_modules"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/dist"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"**/.cache"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 默认 cmd 终端</span></span><br><span class="line">  <span class="string">"terminal.external.osxExec"</span>: <span class="string">"iTerm.app"</span>,</span><br><span class="line">  <span class="string">"telemetry.enableTelemetry"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"telemetry.enableCrashReporter"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"window.zoomLevel"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 插件定义</span></span><br><span class="line">  <span class="comment">// 关闭自带 js 校验，避免与 ESLint 插件冲突</span></span><br><span class="line">  <span class="string">"javascript.validate.enable"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// ESLint 自动修复</span></span><br><span class="line">  <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ESLint 加入 Vue 格式支持</span></span><br><span class="line">  <span class="string">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">     &#123; <span class="string">"language"</span>: <span class="string">"vue"</span>, <span class="string">"autoFix"</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">     &#123; <span class="string">"language"</span>: <span class="string">"html"</span>, <span class="string">"autoFix"</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键位设置"><a href="#键位设置" class="headerlink" title="键位设置"></a>键位设置</h3><p>根据个人习惯及键盘布局进行优化，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="comment">// 针对 HHKB 键盘优化</span></span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"cmd+escape"</span>, <span class="string">"command"</span>: <span class="string">"workbench.action.terminal.toggleTerminal"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"cmd+shift+escape"</span>, <span class="string">"command"</span>: <span class="string">"workbench.action.showErrorsWarnings"</span>&#125;,</span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"alt+i"</span>, <span class="string">"command"</span>: <span class="string">"cursorUp"</span>, <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"alt+j"</span>, <span class="string">"command"</span>: <span class="string">"cursorLeft"</span>, <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"alt+k"</span>, <span class="string">"command"</span>: <span class="string">"cursorDown"</span>, <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"key"</span>: <span class="string">"alt+l"</span>, <span class="string">"command"</span>: <span class="string">"cursorRight"</span>, <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>创建项目应养成的几个习惯步骤：</p><ol><li>创建 .editorconfig 配置</li><li>创建 .eslintrc 配置</li><li>创建 .gitignore 配置</li><li>创建 .babelrc 配置（*）</li></ol><h3 id="editorconfig-配置"><a href="#editorconfig-配置" class="headerlink" title=".editorconfig 配置"></a>.editorconfig 配置</h3><p>通用，所有项目应都保持该配置一致：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  See http://editorconfig.org/</span></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">[*]</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="eslintrc-yml-配置"><a href="#eslintrc-yml-配置" class="headerlink" title=".eslintrc.yml 配置"></a>.eslintrc.yml 配置</h3><p>通用，后端可直接使用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">extends:</span> <span class="string">'dwing'</span></span><br></pre></td></tr></table></figure><p>在这个基础上可以进行一些扩展，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">extends:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'plugin:vue/recommended'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'dwing'</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="string">import/extensions:</span> <span class="string">[2,</span> <span class="string">'always'</span><span class="string">,</span> <span class="string">&#123;</span> <span class="attr">js:</span> <span class="string">'never'</span><span class="string">,</span> <span class="attr">vue:</span> <span class="string">'always'</span> <span class="string">&#125;]</span></span><br><span class="line"><span class="attr">settings:</span></span><br><span class="line">  <span class="string">import/resolver:</span></span><br><span class="line"><span class="attr">    webpack:</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">'build/webpack.config.js'</span></span><br></pre></td></tr></table></figure><h3 id="gitignore-配置"><a href="#gitignore-配置" class="headerlink" title=".gitignore 配置"></a>.gitignore 配置</h3><p>默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.nyc_output/</span><br><span class="line">.cache/</span><br><span class="line">demo/</span><br><span class="line">dist/</span><br><span class="line"></span><br><span class="line">*.log</span><br><span class="line">*.log.*</span><br><span class="line">.DS_Store</span><br><span class="line">dump.rdb</span><br><span class="line">coverage.lcov</span><br></pre></td></tr></table></figure><h3 id="babelrc-配置"><a href="#babelrc-配置" class="headerlink" title=".babelrc 配置"></a>.babelrc 配置</h3><p>默认配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"targets"</span>: &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"last 2 versions"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"transform-runtime"</span>, &#123;</span><br><span class="line">      <span class="attr">"helpers"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"polyfill"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"moduleName"</span>: <span class="string">"babel-runtime"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认需要安装 <code>babel-preset-env</code>、<code>babel-plugin-transform-runtime</code>、<code>babel-runtime</code>。</p><p>添加插件务必谨慎，任何一个插件都可能导致一个几百字节的 <code>Hello World</code> 变成几十甚至几百 KB。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高效工具&quot;&gt;&lt;a href=&quot;#高效工具&quot; class=&quot;headerlink&quot; title=&quot;高效工具&quot;&gt;&lt;/a&gt;高效工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Brew： 用于安装各类 *nix 依赖包和应用&lt;/li&gt;
&lt;li&gt;dnsmasq： Localhost下的泛域名指定（Brew 安装）&lt;/li&gt;
&lt;li&gt;LaunchRocket： Brew 应用 GUI 管理工具（Brew Cask 安装）&lt;/li&gt;
&lt;li&gt;iTerm + Oh My Zsh!： 高效 Shell 工具&lt;/li&gt;
&lt;li&gt;iStat Menus：系统监控&lt;/li&gt;
&lt;li&gt;CheatSheet： 按住 &lt;code&gt;⌘ command&lt;/code&gt; 不放弹出快捷键菜单&lt;/li&gt;
&lt;li&gt;Moom： 窗口分屏工具&lt;/li&gt;
&lt;li&gt;iHosts： 本地域名解析管理工具&lt;/li&gt;
&lt;li&gt;RescueTime： 记录每天你到底只tm专注工作了几分钟（胆小勿入）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="dev" scheme="http://blog.airdwing.com/tags/dev/"/>
    
      <category term="fe" scheme="http://blog.airdwing.com/tags/fe/"/>
    
      <category term="be" scheme="http://blog.airdwing.com/tags/be/"/>
    
  </entry>
  
  <entry>
    <title>Willin: AirX 开发最佳实践</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-airx-development-guide/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-airx-development-guide/</id>
    <published>2017-08-17T00:29:57.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接入流程"><a href="#接入流程" class="headerlink" title="接入流程"></a>接入流程</h1><ol><li>完成认证(个人/组织)</li><li>创建应用</li><li>完成应用功能的开发测试</li><li>提交审核</li><li>审核完成后, 正式上线</li></ol><a id="more"></a><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><p>创建应用后, 将得到:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  SecretId: <span class="string">'AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA'</span>,</span><br><span class="line">  SecretKey: <span class="string">'Gu5t9xGARNpq86cd98joQYCN3Cozk1qA'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的信息, 妥善保管 <code>SecretKey</code> 切勿在任何情况下进行泄露.</p><h2 id="公共请求参数"><a href="#公共请求参数" class="headerlink" title="公共请求参数"></a>公共请求参数</h2><table><thead><tr><th style="text-align:right">名称</th><th style="text-align:center">类型</th><th style="text-align:left">描述</th><th style="text-align:center">是否必选</th></tr></thead><tbody><tr><td style="text-align:right">Timestamp</td><td style="text-align:center">UInt</td><td style="text-align:left">当前UNIX时间戳，可记录发起API请求的时间(如:1495608418)。</td><td style="text-align:center">√</td></tr><tr><td style="text-align:right">Nonce</td><td style="text-align:center">UInt</td><td style="text-align:left">随机正整数，与 Timestamp 联合起来, 用于防止重放攻击。</td><td style="text-align:center">√</td></tr><tr><td style="text-align:right">SignatureMethod</td><td style="text-align:center">String</td><td style="text-align:left">用来说明Signature签名使用的签名算法，字段值可为”HmacSHA256”和”HmacSHA1”。目前支持HmacSHA256和HmacSHA1两种签名算法，用户不传该字段默认使用HmacSHA1签名算法。若用户填写的字段值错误，则也默认使用HmacSHA1签名算法。</td><td style="text-align:center">×</td></tr><tr><td style="text-align:right">SecretId</td><td style="text-align:center">String</td><td style="text-align:left">在<a href="#">云API密钥</a>上申请的标识身份的 SecretId，一个 SecretId 对应唯一的 SecretKey , 而 SecretKey 会用来生成请求签名 Signature。具体可参考 <a href="#">签名方法</a> 页面。</td><td style="text-align:center">√</td></tr><tr><td style="text-align:right">Signature</td><td style="text-align:center">String</td><td style="text-align:left">请求签名，用来验证此次请求的合法性，由系统根据输入参数自动生成。具体可参考 <a href="#">签名方法</a> 页面。</td><td style="text-align:center">√</td></tr></tbody></table><p>假设用户想要查询用户是否存在，则其GET请求链接的形式可能如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://api.dwi.ng/user/check/13312341234?</span><br><span class="line">SecretId=xxxxxxx</span><br><span class="line">&amp;Timestamp=1495608418</span><br><span class="line">&amp;Nonce=59485</span><br><span class="line">&amp;Signature=mysignature</span><br><span class="line">&amp;&lt;接口请求参数&gt;</span><br></pre></td></tr></table></figure><p>如果是POST请求,参数必须全部放置在表单内(而非使用QueryString方式传递)。</p><h3 id="公共返回结果"><a href="#公共返回结果" class="headerlink" title="公共返回结果"></a>公共返回结果</h3><p>请求成功:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="comment">// 成功返回的结果数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求失败:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"code"</span>: <span class="number">1000</span> <span class="comment">// 错误码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="签名机制"><a href="#签名机制" class="headerlink" title="签名机制"></a>签名机制</h2><p>假设用户的 SecretId 和 SecretKey 分别是：</p><blockquote><p>SecretId: AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA</p><p>SecretKey: Gu5t9xGARNpq86cd98joQYCN3Cozk1qA</p></blockquote><p>注意：这里只是示例，请用户根据自己实际的SecretId和SecretKey和请求参数进行后续操作！</p><p>以查看用户是否存在(/user/check/:username)请求为例，当用户调用这一接口时，其请求参数可能如下:</p><table><thead><tr><th style="text-align:right">参数名称</th><th style="text-align:left">中文</th><th style="text-align:left">参数值</th></tr></thead><tbody><tr><td style="text-align:right">SecretId</td><td style="text-align:left">密钥Id</td><td style="text-align:left">AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA</td></tr><tr><td style="text-align:right">Timestamp</td><td style="text-align:left">当前时间戳</td><td style="text-align:left">1465185768</td></tr><tr><td style="text-align:right">Nonce</td><td style="text-align:left">随机正整数</td><td style="text-align:left">11886</td></tr><tr><td style="text-align:right">SignatureMethod</td><td style="text-align:left">签名方式</td><td style="text-align:left">HmacSHA256</td></tr></tbody></table><h3 id="对参数排序"><a href="#对参数排序" class="headerlink" title="对参数排序"></a>对参数排序</h3><p>首先对所有请求参数按参数名做字典序升序排列，所谓字典序升序排列，直观上就如同在字典中排列单词一样排序，按照字母表或数字表里递增顺序的排列次序，即先考虑第一个“字母”，在相同的情况下考虑第二个“字母”，依此类推。您可以借助编程语言中的相关排序函数来实现这一功能，如php中的ksort函数。上述示例参数的排序结果如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'Nonce'</span> : <span class="number">11886</span>,</span><br><span class="line">    <span class="string">'SecretId'</span> : <span class="string">'AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA'</span>,</span><br><span class="line">    <span class="string">'SignatureMethod'</span> : <span class="string">'HmacSHA256'</span>,</span><br><span class="line">    <span class="string">'Timestamp'</span> : <span class="number">1465185768</span>,</span><br><span class="line">    <span class="string">'mobile'</span>: <span class="string">'13300001111'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'xxxxxxxxxxxxxxxx'</span>,</span><br><span class="line">    <span class="string">'key'</span>: <span class="string">'2222'</span>,</span><br><span class="line">    <span class="string">'code'</span>: <span class="string">'1111'</span>,</span><br><span class="line">    <span class="string">'guid'</span>: <span class="string">'123456'</span>,</span><br><span class="line">    <span class="string">'device'</span>: <span class="string">'iphone'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用其它程序设计语言开发时, 可对上面示例中的参数进行排序，得到的结果一致即可。</p><h3 id="拼接请求字符串"><a href="#拼接请求字符串" class="headerlink" title="拼接请求字符串"></a>拼接请求字符串</h3><p>此步骤生成请求字符串。</p><p>将把上一步排序好的请求参数格式化成“参数名称”=“参数值”的形式。</p><p><strong>注意：1、“参数值”为原始值而非url编码后的值。2、若输入参数的Key中包含下划线，则需要将其转换为“.”，但是Value中的下划线则不用转换。如Placement_Zone=CN_GUANGZHOU,则需要将其转换成Placement.Zone=CN_GUANGZHOU。</strong></p><p>然后将格式化后的各个参数用”&amp;”拼接在一起，最终生成的请求字符串为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nonce=33954&amp;SecretId=AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA&amp;Timestamp=1496305987&amp;code=1111&amp;device=iph</span><br><span class="line">one&amp;guid=123456&amp;key=2222&amp;mobile=13300001111&amp;password=xxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h3 id="拼接签名原文字符串"><a href="#拼接签名原文字符串" class="headerlink" title="拼接签名原文字符串"></a>拼接签名原文字符串</h3><p>此步骤生成签名原文字符串。<br>签名原文字符串由以下几个参数构成:</p><p>1) 请求方法: 支持 POST 和 GET 方式, 这里使用 GET 请求, 注意方法为全大写。<br>2) 请求主机: 请求域名为：api.dwi.ng。<br>3) 请求路径: 如 /user/check/13112341234。<br>4) 请求字符串: 即上一步生成的请求字符串。</p><p>签名原文串的拼接规则为:</p><blockquote><p>请求方法 + 请求主机 + 请求路径 + ? + 请求字符串</p></blockquote><p>示例的拼接结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POSTapi.dwi.ng/user/register/mobile?Nonce=33954&amp;SecretId=AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA&amp;Timestamp=1496305987&amp;code=1111&amp;device=iph</span><br><span class="line">one&amp;guid=123456&amp;key=2222&amp;mobile=13300001111&amp;password=xxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h3 id="生成签名串"><a href="#生成签名串" class="headerlink" title="生成签名串"></a>生成签名串</h3><p>此步骤生成签名串。</p><p><strong>注意：这里要根据您指定的签名算法（即SignatureMethod参数）生成签名串。当指定SignatureMethod为HmacSHA256时，需要使用HmacSHA256计算签名，其他情况请使用HmacSHA1计算签名。</strong></p><p>首先使用签名算法（HmacSHA256或HmacSHA1）对上一步中获得的签名原文字符串进行签名，然后将生成的签名串使用 Base64 进行编码，即可获得最终的签名串。</p><p>具体代码如下，以 PHP/node.js 语言为例，由于本例中所用的签名算法为HmacSHA256，因此生成签名串的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php</span></span><br><span class="line">$secretKey = <span class="string">'Gu5t9xGARNpq86cd98joQYCN3Cozk1qA'</span>;</span><br><span class="line">$srcStr = <span class="string">'POSTapi.dwi.ng/user/register/mobile?Nonce=33954&amp;SecretId=AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA&amp;Timestamp=1496305987&amp;code=1111&amp;device=iph'</span>;</span><br><span class="line">$signStr = base64_encode(hash_hmac(<span class="string">'sha256'</span>, $srcStr, $secretKey, <span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">echo</span> $signStr;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node.js</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">'Gu5t9xGARNpq86cd98joQYCN3Cozk1qA'</span>;</span><br><span class="line"><span class="keyword">const</span> srcStr = <span class="string">'POSTapi.dwi.ng/user/register/mobile?Nonce=33954&amp;SecretId=AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA&amp;Timestamp=1496305987&amp;code=1111&amp;device=iphone&amp;guid=123456&amp;key=2222&amp;mobile=13300001111&amp;password=xxxxxxxxxxxx'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hmac = crypto.createHmac(<span class="string">'sha256'</span>, secretKey);</span><br><span class="line"><span class="keyword">const</span> signStr = hmac.update(<span class="keyword">new</span> Buffer(srcStr, <span class="string">'utf8'</span>)).digest(<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(signStr);</span><br></pre></td></tr></table></figure><p>最终得到的签名串类似:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZvlpRKOA6iQD+DGtjuiWUpN/H81v0ChwDtS2syL2hzw=</span><br></pre></td></tr></table></figure><p>同理，当您指定签名算法为HmacSHA1时（即未指定SignatureMethod参数为HmacSHA256），生成签名串的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node.js</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">'Gu5t9xGARNpq86cd98joQYCN3Cozk1qA'</span>;</span><br><span class="line"><span class="keyword">const</span> srcStr = <span class="string">'POSTapi.dwi.ng/user/register/mobile?Nonce=33954&amp;SecretId=AKIDz8krbsJ5yKBZQpn74WFkmLPx3gnPhESA&amp;Timestamp=1496305987&amp;code=1111&amp;device=iphone&amp;guid=123456&amp;key=2222&amp;mobile=13300001111&amp;password=xxxxxxxxxxxx'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hmac = crypto.createHmac(<span class="string">'sha1'</span>, secretKey);</span><br><span class="line"><span class="keyword">const</span> signStr = hmac.update(<span class="keyword">new</span> Buffer(srcStr, <span class="string">'utf8'</span>)).digest(<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(signStr);</span><br></pre></td></tr></table></figure><p>最终得到的签名串类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+QeK/Gvh2nKz0kBrscT/IHJBbYo=</span><br></pre></td></tr></table></figure><p>使用其它程序设计语言开发时, 可用上面示例中的原文进行签名验证, 得到的签名串与例子中的一致即可。</p><h3 id="签名串编码"><a href="#签名串编码" class="headerlink" title="签名串编码"></a>签名串编码</h3><p>生成的签名串并不能直接作为请求参数，需要对其进行 URL 编码。<br>如上一步生成的签名串为PSWUwVv4TfW2sQP1FT9KbbLjIZ9bmK8f1cL6fbpf3KI=，则其编码后为PSWUwVv4TfW2sQP1FT9KbbLjIZ9bmK8f1cL6fbpf3KI%3D。因此，最终得到的签名串请求参数(Signature)为：PSWUwVv4TfW2sQP1FT9KbbLjIZ9bmK8f1cL6fbpf3KI%3D，它将用于生成最终的请求URL。</p><p><strong>注意：如果用户的请求方法是GET，则对所有请求参数的参数值均需要做URL编码；此外，部分语言库会自动对URL进行编码，重复编码会导致签名校验失败。</strong></p><h3 id="鉴权失败"><a href="#鉴权失败" class="headerlink" title="鉴权失败"></a>鉴权失败</h3><p>当鉴权不通过时，可能出现的错误如下表：</p><table><thead><tr><th style="text-align:center">错误代码</th><th style="text-align:left">错误类型</th><th style="text-align:left">错误描述</th></tr></thead><tbody><tr><td style="text-align:center">4100</td><td style="text-align:left">身份认证失败</td><td style="text-align:left">身份验证失败，请确保您请求参数中的Signature按照上述步骤计算正确，特别注意Signature要做url编码后再发起请求。</td></tr><tr><td style="text-align:center">4101</td><td style="text-align:left">未被开发商授权访问本接口</td><td style="text-align:left">该子用户未被授权调用此接口。请联系开发商授权，详情请查阅授权策略。</td></tr><tr><td style="text-align:center">4102</td><td style="text-align:left">未被开发商授权访问本接口中所操作的资源</td><td style="text-align:left">请问的资源参数中，存在未被开发商授权授权访问的资源，请在message字段中查看无权查看的资源ID。请联系开发商授权，详情请查阅授权策略。</td></tr><tr><td style="text-align:center">4103</td><td style="text-align:left">非开发商的SecretId暂不支持调用本接口</td><td style="text-align:left">子用户的SecretID不支持调用此接口,只有开发商有权调用。</td></tr><tr><td style="text-align:center">4104</td><td style="text-align:left">secretId不存在</td><td style="text-align:left">签名所用的secretId不存在，也可能是密钥状态有误，请确保API密钥有效且未被禁用。</td></tr><tr><td style="text-align:center">4110</td><td style="text-align:left">鉴权失败</td><td style="text-align:left">权限校验失败，请确保您有使用所访问资源的权限。</td></tr><tr><td style="text-align:center">4500</td><td style="text-align:left">重放攻击错误</td><td style="text-align:left">请注意 Nonce 参数两次请求不能重复, Timestamp 与大翼服务器相差不能超过 2 小时。</td></tr></tbody></table><h2 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  UNKOWN_ERROR: <span class="number">1000</span>, <span class="comment">// 未知错误</span></span><br><span class="line">  INVALID_PARAMS: <span class="number">1001</span>, <span class="comment">// 参数不合法</span></span><br><span class="line">  DB_ERROR: <span class="number">1100</span>, <span class="comment">// 数据库错误</span></span><br><span class="line">  AZURE_ERROR: <span class="number">1101</span>, <span class="comment">// 微软基础服务错误</span></span><br><span class="line"></span><br><span class="line">  INVALID_SMS_CODE: <span class="number">2000</span>, <span class="comment">// 短信验证码错误</span></span><br><span class="line">  LIMITATION_SMS_CODE: <span class="number">2001</span>, <span class="comment">// 短信验证码发送限制</span></span><br><span class="line">  USERNAME_EXISTED: <span class="number">2002</span>, <span class="comment">// 用户名已经被注册</span></span><br><span class="line">  USERNAME_BINDED: <span class="number">2003</span>, <span class="comment">// 已绑定用户名</span></span><br><span class="line">  EMAIL_EXISTED: <span class="number">2004</span>, <span class="comment">// 邮箱已经被注册</span></span><br><span class="line">  MOBILE_EXISTED: <span class="number">2005</span>, <span class="comment">// 手机号已经被注册</span></span><br><span class="line">  ORG_EXISTED: <span class="number">2006</span>, <span class="comment">// 组织名称已存在</span></span><br><span class="line">  INVALID_EMAIL_CODE: <span class="number">2007</span>, <span class="comment">// 邮箱验证码错误</span></span><br><span class="line">  LIMITATION_EMAIL_CODE: <span class="number">2008</span>, <span class="comment">// 邮箱验证码发送限制</span></span><br><span class="line">  EMAIL_BINDED: <span class="number">2009</span>, <span class="comment">// 用户已经有了绑定的邮箱</span></span><br><span class="line"></span><br><span class="line">  INVALID_PASSWORD: <span class="number">2100</span>, <span class="comment">// 密码强度不符合要求</span></span><br><span class="line">  INVALID_ENCRYPTION: <span class="number">2101</span>, <span class="comment">// 加密错误</span></span><br><span class="line"></span><br><span class="line">  INVALID_USERNAME_OR_PASSWORD: <span class="number">2200</span>, <span class="comment">// 用户不存在或密码错误</span></span><br><span class="line">  INVALID_LOGIN_DEVICE: <span class="number">2201</span>, <span class="comment">// 未授权的登录设备</span></span><br><span class="line">  INVALID_USER_DEVICE_OWN: <span class="number">2202</span>, <span class="comment">// 用户未拥有此设备</span></span><br><span class="line">  INVALID_LOGIN_AUTH: <span class="number">2203</span>, <span class="comment">// 登录超时或非法登录Auth Token</span></span><br><span class="line">  USER_JOINED_ORG: <span class="number">2300</span>, <span class="comment">// 用户已经加入/创建组织</span></span><br><span class="line">  ADMIN_NOT_EXIST: <span class="number">2301</span>, <span class="comment">// 组织管理员不存在</span></span><br><span class="line">  PARENT_ORG_NOT_EXIST: <span class="number">2302</span>, <span class="comment">// 上级组织不存在</span></span><br><span class="line">  ORG_NOT_EXIST: <span class="number">2303</span>, <span class="comment">// 组织不存在</span></span><br><span class="line">  UID_NOT_MATCH_OID: <span class="number">2304</span>, <span class="comment">// 用户和组织不匹配</span></span><br><span class="line">  USER_MOBILE_EXITED: <span class="number">2305</span>, <span class="comment">// 用户手机号尚未注册</span></span><br><span class="line">  USER_TO_ADD_NOT_EXIST: <span class="number">2306</span>, <span class="comment">// 待添加的用户不存在</span></span><br><span class="line">  USER_TO_DELETE_NOT_EXIST: <span class="number">2307</span>, <span class="comment">// 待删除的用户不存在</span></span><br><span class="line">  USER_NOT_JOINED_ORG: <span class="number">2308</span>, <span class="comment">// 用户未加入组织</span></span><br><span class="line">  USER_PRIVILEGE_NOT_SUFFICIENT: <span class="number">2309</span>, <span class="comment">// 用户权限不足</span></span><br><span class="line">  ORG_FORBIDDEN: <span class="number">2310</span>, <span class="comment">// 无权操作该组织</span></span><br><span class="line">  PARENT_ORG_FORBIDDEN: <span class="number">2311</span>, <span class="comment">// 无权操作上级组织</span></span><br><span class="line">  USER_EMAIL_EXITED: <span class="number">2312</span>, <span class="comment">// 用户邮箱尚未注册</span></span><br><span class="line">  INVALID_FILE_EXT: <span class="number">2400</span>, <span class="comment">// 文件格式不合法</span></span><br><span class="line">  INVALID_FILE_TYPE: <span class="number">2401</span>, <span class="comment">// 文件类型不合法</span></span><br><span class="line">  LOG_INFO_MISS: <span class="number">2402</span>, <span class="comment">// 日志信息参数缺失</span></span><br><span class="line">  DEVICE_ALREADY_REGISTERRED: <span class="number">2500</span>, <span class="comment">// 该设备已经注册</span></span><br><span class="line">  DEVICE_NOT_EXIST: <span class="number">2501</span>, <span class="comment">// 设备未注册</span></span><br><span class="line">  DEVICE_ENABLE_IOTHUB_FAILURE: <span class="number">2502</span>, <span class="comment">// 设备iothub启用失败</span></span><br><span class="line">  DEVICE_DISABLE_IOTHUB_FAILURE: <span class="number">2503</span>, <span class="comment">// 设备iothub禁用失败</span></span><br><span class="line">  NO_PARAMS_EDIT: <span class="number">2504</span>, <span class="comment">// 修改设备信息输入参数不可用</span></span><br><span class="line">  TAPE_CREATE_FAILURE: <span class="number">2601</span>, <span class="comment">// 创建录制任务失败</span></span><br><span class="line">  PLAN_NOT_ENDED: <span class="number">2602</span>, <span class="comment">// 已经申请的任务没有终止</span></span><br><span class="line">  PLAN_ALREADY_ENDED: <span class="number">2603</span>, <span class="comment">// 已经申请的任务已经终止</span></span><br><span class="line">  VIDEO_CODE_CHECK_FAILURE: <span class="number">2604</span>, <span class="comment">// 视频直播索引码无效</span></span><br><span class="line">  DID_AND_STARTTIME_USED: <span class="number">2605</span>, <span class="comment">// 数据库中用户id和起飞时间已占用</span></span><br><span class="line">  ORG_DATA_ERROR: <span class="number">2606</span>, <span class="comment">// 数据库中oid上级递进查询出现问题，例子：出现子组织a的父组织b的父组织，又是a</span></span><br><span class="line">  ENDTIME_EARLIER_THAN_STARTTIME: <span class="number">2607</span>, <span class="comment">// 传递参数中，结束时间比开始时间要早，错误</span></span><br><span class="line">  TIME_SHOULD_IN_HOUR: <span class="number">2608</span>, <span class="comment">// 只能查一个小时之内的直播数据</span></span><br><span class="line">  USER_NOT_OWN_APP_KEY: <span class="number">2700</span>, <span class="comment">// 用户无权处理此app版本</span></span><br><span class="line">  WRONG_INPUT_PARAMS: <span class="number">2701</span>, <span class="comment">// 用户输入参数有误</span></span><br><span class="line">  ALREADY_VERIFIED_CAN_NOT_EDITED: <span class="number">2702</span>, <span class="comment">// 已经验证完毕，不能再次编辑</span></span><br><span class="line">  TARGET_NOT_EXISTED: <span class="number">2703</span>, <span class="comment">// 目标app记录不存在</span></span><br><span class="line">  APP_VERSION_DELETED: <span class="number">2704</span>, <span class="comment">// APP版本已被删除</span></span><br><span class="line">  CAN_NOT_FIND_APP_VERSION: <span class="number">2705</span>, <span class="comment">// appkey对应的app找不到可用版本</span></span><br><span class="line">  DATA_ORGANIZATION_WRONG: <span class="number">2706</span>, <span class="comment">// 组织用户数据错误</span></span><br><span class="line">  <span class="comment">// 签名相关</span></span><br><span class="line">  CAN_NOT_FIND_BIND_INFO: <span class="number">2800</span>, <span class="comment">// 找不到目标绑定信息</span></span><br><span class="line">  BIND_INFO_PARSE_ERROR: <span class="number">2801</span>, <span class="comment">// 绑定信息对象解析错误</span></span><br><span class="line">  AUTHORIZE_FAILED: <span class="number">4100</span>, <span class="comment">// 鉴权失败</span></span><br><span class="line">  INVALID_APPKEY: <span class="number">4104</span>, <span class="comment">// 不存在的SecretId</span></span><br><span class="line">  REPLAY_ATTACKS: <span class="number">4500</span> <span class="comment">// 重放攻击</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接入流程&quot;&gt;&lt;a href=&quot;#接入流程&quot; class=&quot;headerlink&quot; title=&quot;接入流程&quot;&gt;&lt;/a&gt;接入流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;完成认证(个人/组织)&lt;/li&gt;
&lt;li&gt;创建应用&lt;/li&gt;
&lt;li&gt;完成应用功能的开发测试&lt;/li&gt;
&lt;li&gt;提交审核&lt;/li&gt;
&lt;li&gt;审核完成后, 正式上线&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="airx" scheme="http://blog.airdwing.com/tags/airx/"/>
    
      <category term="dev" scheme="http://blog.airdwing.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Willin: Azure Node.js IoT Hub路由开发指南</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-azure-iothub-route-nodejs/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-azure-iothub-route-nodejs/</id>
    <published>2017-08-07T03:05:16.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<p>基础可以看之前的一篇 《<a href="http://blog.airdwing.com/posts/2017/willin-azure-iothub-nodejs/">Azure Node.js IoT Hub开发指南</a>》</p><p>本章主要讲解:</p><ul><li>如何使用 eventhub 创建路由</li><li>如何将一条设备消息同时传入两个路由进行不同的处理</li></ul><h2 id="概念讲解"><a href="#概念讲解" class="headerlink" title="概念讲解"></a>概念讲解</h2><ul><li>事件中心(Event Hubs): 用于服务器端侦听并处理的 EventHub 终结点</li><li>终结点(IOT Hub): 关联到 Event Hubs 中的事件中心</li><li>路由(IOT Hub): 关联到 IOT Hub中的终结点, 处理路由分发的主要配置环节</li></ul><a id="more"></a><h2 id="在-Azure-中创建并配置路由相关的基础服务"><a href="#在-Azure-中创建并配置路由相关的基础服务" class="headerlink" title="在 Azure 中创建并配置路由相关的基础服务"></a>在 Azure 中创建并配置路由相关的基础服务</h2><p>首先需要分别创建 IOT Hub 和 EventHubs.</p><h3 id="1-创建EventHubs事件中心"><a href="#1-创建EventHubs事件中心" class="headerlink" title="1. 创建EventHubs事件中心"></a>1. 创建EventHubs事件中心</h3><p><img src="https://user-images.githubusercontent.com/1890238/29015275-06999aa8-7b13-11e7-893c-2f75ca58bb14.png" alt="eventhub"></p><h3 id="2-创建IOT-Hub终结点"><a href="#2-创建IOT-Hub终结点" class="headerlink" title="2. 创建IOT Hub终结点"></a>2. 创建IOT Hub终结点</h3><p><img src="https://user-images.githubusercontent.com/1890238/29015320-334b5a00-7b13-11e7-8c12-dcc4d152e6e7.png" alt="endpoint"></p><p>注意这里, <code>状态</code> 初始不显示, 首次消息通讯成功后再来这里看应该会变.</p><p>系统可能会存在这样的Bug, 怎么也收不到消息. 这里的状态就会一直不显示:</p><p><img src="https://user-images.githubusercontent.com/1890238/29015355-4a0427c2-7b13-11e7-8a9c-24e6bc87144b.png" alt="err"></p><p>像这样的情况发生的时候, 删除路由,删除终结点,删除事件中心, 重头再来.</p><h3 id="3-配置路由"><a href="#3-配置路由" class="headerlink" title="3. 配置路由"></a>3. 配置路由</h3><p><img src="https://user-images.githubusercontent.com/1890238/29015397-7cb355bc-7b13-11e7-8a65-957e76defadd.png" alt="route"></p><p>仔细看上图, 两个路由的查询条件一样, 但分别放进 <code>test</code>/<code>test2</code> 两个不同的终结点.</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventhub.js</span></span><br><span class="line"><span class="keyword">const</span> EventHubClient = <span class="built_in">require</span>(<span class="string">'azure-event-hubs'</span>).Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPartitionIds = <span class="keyword">async</span> (client) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> partitionIds = <span class="keyword">await</span> client.getPartitionIds();</span><br><span class="line">  <span class="keyword">return</span> partitionIds;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultErrorHandler = <span class="keyword">async</span> (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultMessageHandler = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message.body);</span><br><span class="line">  <span class="built_in">console</span>.log(message.body.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createReceiver = <span class="keyword">async</span> (&#123; connStr = <span class="string">''</span>, messageHandler = defaultMessageHandler &#125; = &#123;&#125;, errorHandler = defaultErrorHandler) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> client = EventHubClient.fromConnectionString(connStr);</span><br><span class="line">  <span class="keyword">await</span> client.open();</span><br><span class="line">  <span class="keyword">const</span> partitionIds = <span class="keyword">await</span> getPartitionIds(client);</span><br><span class="line">  partitionIds.forEach(<span class="keyword">async</span> (partitionId) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> receiver = <span class="keyword">await</span> client.createReceiver(<span class="string">'$Default'</span>, partitionId, &#123; <span class="attr">startAfterTime</span>: <span class="built_in">Date</span>.now() &#125;);</span><br><span class="line">    receiver.on(<span class="string">'errorReceived'</span>, <span class="keyword">async</span> (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.transport &amp;&amp; err.transport.name === <span class="string">'AmqpProtocolError'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Restart #<span class="subst">$&#123;partitionId&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">await</span> createReceiver(&#123; connStr, errorHandler, messageHandler &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> errorHandler(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    receiver.on(<span class="string">'message'</span>, messageHandler);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createReceiver;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> receiver = <span class="built_in">require</span>(<span class="string">'./eventhub'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> receiver(&#123;</span><br><span class="line">    connStr: <span class="string">'test事件中心的连接'</span>,</span><br><span class="line">    messageHandler: <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(msg.body);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> receiver(&#123;</span><br><span class="line">    connStr: <span class="string">'test2事件中心的连接'</span>,</span><br><span class="line">    messageHandler: <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(msg.body);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="客户端模拟消息发送"><a href="#客户端模拟消息发送" class="headerlink" title="客户端模拟消息发送"></a>客户端模拟消息发送</h3><p>参考官方的示例: <a href="https://github.com/azure/azure-iot-sdk-node/blob/master/device/samples/simple_sample_device.js#L44" target="_blank" rel="noopener">https://github.com/azure/azure-iot-sdk-node/blob/master/device/samples/simple_sample_device.js#L44</a></p><p>注意第44行位置, 下面添加一行, 加入路由属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.properties.add(<span class="string">'route'</span>, <span class="string">'tt'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基础可以看之前的一篇 《&lt;a href=&quot;http://blog.airdwing.com/posts/2017/willin-azure-iothub-nodejs/&quot;&gt;Azure Node.js IoT Hub开发指南&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;本章主要讲解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用 eventhub 创建路由&lt;/li&gt;
&lt;li&gt;如何将一条设备消息同时传入两个路由进行不同的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;概念讲解&quot;&gt;&lt;a href=&quot;#概念讲解&quot; class=&quot;headerlink&quot; title=&quot;概念讲解&quot;&gt;&lt;/a&gt;概念讲解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;事件中心(Event Hubs): 用于服务器端侦听并处理的 EventHub 终结点&lt;/li&gt;
&lt;li&gt;终结点(IOT Hub): 关联到 Event Hubs 中的事件中心&lt;/li&gt;
&lt;li&gt;路由(IOT Hub): 关联到 IOT Hub中的终结点, 处理路由分发的主要配置环节&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="azure" scheme="http://blog.airdwing.com/tags/azure/"/>
    
      <category term="iothub" scheme="http://blog.airdwing.com/tags/iothub/"/>
    
      <category term="eventhubs" scheme="http://blog.airdwing.com/tags/eventhubs/"/>
    
  </entry>
  
  <entry>
    <title>Willin: Node.js CPU调度优化</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-cluster-in-nodejs/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-cluster-in-nodejs/</id>
    <published>2017-06-14T04:25:22.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Master / Cluster 模式</p></blockquote><h2 id="单一服务器多核心分配"><a href="#单一服务器多核心分配" class="headerlink" title="单一服务器多核心分配"></a>单一服务器多核心分配</h2><p>假设处理的任务列表如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>以10为例,假设服务器为4CPU,那么每个CPU处理的任务分别为:</p><ul><li>CPU1: [1, 2, 3]</li><li>CPU2: [4, 5, 6]</li><li>CPU3: [7, 8]</li><li>CPU4: [9, 0]</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length; <span class="comment">// 假设该值为 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理的任务列表</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度处理代码写在这儿</span></span><br><span class="line"><span class="comment">// 每个 CPU 分配 N 个任务</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="built_in">Math</span>.floor(arr.length / numCPUs);</span><br><span class="line"><span class="comment">// 未分配的余数</span></span><br><span class="line"><span class="keyword">const</span> remainder = arr.length % numCPUs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= numCPUs; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>, n + (i &gt; remainder ? <span class="number">0</span> : <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cluster-模式示例"><a href="#Cluster-模式示例" class="headerlink" title="Cluster 模式示例"></a>Cluster 模式示例</h2><p>入口文件 <code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">/* eslint global-require:0 */</span></span><br><span class="line">  <span class="keyword">let</span> run;</span><br><span class="line">  <span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    run = <span class="built_in">require</span>(<span class="string">'./cluster/master'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    run = <span class="built_in">require</span>(<span class="string">'./cluster/worker'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> run();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.trace(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>Master任务: <code>./cluster/master.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理的任务列表</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 调度处理代码写在这儿</span></span><br><span class="line">  <span class="comment">// 每个 CPU 分配 N 个任务</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="built_in">Math</span>.floor(arr.length / numCPUs);</span><br><span class="line">  <span class="comment">// 未分配的余数</span></span><br><span class="line">  <span class="keyword">const</span> remainder = arr.length % numCPUs;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= numCPUs; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = arr.splice(<span class="number">0</span>, n + (i &gt; remainder ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 将任务编号传递到 Cluster 内启动</span></span><br><span class="line">    cluster.fork(&#123; <span class="attr">tasks</span>: <span class="built_in">JSON</span>.stringify(tasks) &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  cluster.on(<span class="string">'exit'</span>, (worker) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`worker #<span class="subst">$&#123;worker.id&#125;</span> PID:<span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Cluster任务: <code>./cluster/worker.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"><span class="comment">// 禁止直接启动</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> env = process.env.tasks;</span><br><span class="line">  <span class="keyword">let</span> tasks = [];</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\[.*\]$/</span>.test(env)) &#123;</span><br><span class="line">    tasks = <span class="built_in">JSON</span>.parse(env);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tasks.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 非法启动, 释放进程资源</span></span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`worker #<span class="subst">$&#123;cluster.worker.id&#125;</span> PID:<span class="subst">$&#123;process.pid&#125;</span> Start`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(tasks);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="多服务器多核心分配调度"><a href="#多服务器多核心分配调度" class="headerlink" title="多服务器多核心分配调度"></a>多服务器多核心分配调度</h2><p>假设处理的任务列表如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>];</span><br></pre></td></tr></table></figure><p>有多台负载均衡器,仅确定服务器数量,不确定服务器硬件配置.</p><p>假设目前有3台服务器,分别为 <code>4</code> 核心, <code>6</code> 核心, <code>8</code> 核心.</p><p>按照核心性能进行优先调度,那么每个CPU处理的任务分别为:</p><ul><li>服务器1 (<code>4</code> 核心, 1.8GHz)<ul><li>CPU1: [ 29 ]</li><li>CPU2: [ 30 ]</li><li>CPU3: [ 31 ]</li><li>CPU4: [ 32 ]</li></ul></li><li>服务器2 (<code>6</code> 核心, 2.8GHz)<ul><li>CPU1: [ 1, 2 ]</li><li>CPU2: [ 3, 4 ]</li><li>CPU3: [ 5, 6 ]</li><li>CPU4: [ 7, 8 ]</li><li>CPU5: [ 9, 10 ]</li><li>CPU6: [ 11, 12 ]</li></ul></li><li>服务器3 (<code>8</code> 核心, 2.0GHz)<ul><li>CPU1: [ 13, 14 ]</li><li>CPU2: [ 15, 16 ]</li><li>CPU3: [ 17, 18 ]</li><li>CPU4: [ 19, 20 ]</li><li>CPU5: [ 21, 22 ]</li><li>CPU6: [ 23, 24 ]</li><li>CPU7: [ 25, 26 ]</li><li>CPU8: [ 27, 28 ]</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = os.cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理的任务列表</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度处理代码写在这儿</span></span><br><span class="line"><span class="comment">// 处理器主频</span></span><br><span class="line"><span class="keyword">const</span> speed = os.cpus().reduce(<span class="function">(<span class="params">sum, cpu</span>) =&gt;</span> sum + cpu.speed, <span class="number">0</span>) / numCPUs;</span><br><span class="line"><span class="comment">// 主机名</span></span><br><span class="line"><span class="keyword">const</span> hostname = os.hostname();</span><br><span class="line"><span class="comment">// 获取内网ip</span></span><br><span class="line"><span class="keyword">const</span> eth0 = os.networkInterfaces().eth0;</span><br><span class="line"><span class="keyword">const</span> ip = <span class="keyword">typeof</span> eth0 === <span class="string">'undefined'</span> ? <span class="string">''</span> : eth0.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.family === <span class="string">'IPv4'</span>)[<span class="number">0</span>].address;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./cluster/master.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 上报服务器信息到公共区域, 如 redis</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待 `3` 台服务器全部上报完成</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 性能最高的一台执行任务调度,得到任务列表</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入公共区域,下派任务到其他服务器</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下派本地cluster任务</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Master / Cluster 模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;单一服务器多核心分配&quot;&gt;&lt;a href=&quot;#单一服务器多核心分配&quot; class=&quot;headerlink&quot; title=&quot;单一服务器多核心分配&quot;&gt;&lt;/a&gt;单一服务器多核心分配&lt;/h2&gt;&lt;p&gt;假设处理的任务列表如下:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以10为例,假设服务器为4CPU,那么每个CPU处理的任务分别为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU1: [1, 2, 3]&lt;/li&gt;
&lt;li&gt;CPU2: [4, 5, 6]&lt;/li&gt;
&lt;li&gt;CPU3: [7, 8]&lt;/li&gt;
&lt;li&gt;CPU4: [9, 0]&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="azure" scheme="http://blog.airdwing.com/tags/azure/"/>
    
      <category term="iothub" scheme="http://blog.airdwing.com/tags/iothub/"/>
    
      <category term="eventhubs" scheme="http://blog.airdwing.com/tags/eventhubs/"/>
    
  </entry>
  
  <entry>
    <title>Willin: Azure Node.js IoT Hub开发指南</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-azure-iothub-nodejs/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-azure-iothub-nodejs/</id>
    <published>2017-06-12T04:45:36.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>IOT Hub应用实际开发过程中的一些注意细节</p></blockquote><p>资源:</p><ul><li>创建设备: <a href="https://www.npmjs.com/package/azure-iothub" target="_blank" rel="noopener">https://www.npmjs.com/package/azure-iothub</a></li><li>IoT Hub(基于Event Hubs)消息管理: <a href="https://www.npmjs.com/package/azure-event-hubs" target="_blank" rel="noopener">https://www.npmjs.com/package/azure-event-hubs</a></li><li>开发调试工具: <a href="https://www.npmjs.com/package/iothub-explorer" target="_blank" rel="noopener">https://www.npmjs.com/package/iothub-explorer</a></li></ul><h2 id="简单发送接收示例"><a href="#简单发送接收示例" class="headerlink" title="简单发送接收示例"></a>简单发送接收示例</h2><h3 id="1-注册设备"><a href="#1-注册设备" class="headerlink" title="1. 注册设备"></a>1. 注册设备</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iothub = <span class="built_in">require</span>(<span class="string">'azure-iothub'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> registry = iothub.Registry.fromConnectionString(<span class="string">'[connectionString]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> device = <span class="keyword">new</span> iothub.Device(<span class="literal">null</span>);</span><br><span class="line">device.deviceId = <span class="string">'[deviceId]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printDeviceInfo</span>(<span class="params">err, deviceInfo, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (deviceInfo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(deviceInfo, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Device id: <span class="subst">$&#123;deviceInfo.deviceId&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Device key: <span class="subst">$&#123;deviceInfo.authentication.symmetricKey.primaryKey&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除设备 registry.delete(deviceId, (err, deviceInfo, res) =&gt; &#123;&#125;);</span></span><br><span class="line">registry.create(device, (err, deviceInfo, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    registry.get(device.deviceId, printDeviceInfo);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (deviceInfo) &#123;</span><br><span class="line">    printDeviceInfo(err, deviceInfo, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-模拟设备发送消息"><a href="#2-模拟设备发送消息" class="headerlink" title="2. 模拟设备发送消息"></a>2. 模拟设备发送消息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clientFromConnectionString = <span class="built_in">require</span>(<span class="string">'azure-iot-device-mqtt'</span>).clientFromConnectionString;</span><br><span class="line"><span class="keyword">const</span> Message = <span class="built_in">require</span>(<span class="string">'azure-iot-device'</span>).Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectionString = <span class="string">'HostName=[修改连接主机];DeviceId=[deviceID];SharedAccessKey=[连接密钥]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = clientFromConnectionString(connectionString);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printResultFor</span>(<span class="params">op</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">printResult</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;op&#125;</span> error: <span class="subst">$&#123;err.toString()&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (res) <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;op&#125;</span> status: <span class="subst">$&#123;res.constructor.name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectCallback = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Could not connect: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Client connected'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a message and send it to the IoT Hub every second</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> windSpeed = <span class="number">10</span> + (<span class="built_in">Math</span>.random() * <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">deviceId</span>: <span class="string">'myFirstNodeDevice'</span>, windSpeed &#125;);</span><br><span class="line">      <span class="keyword">const</span> message = <span class="keyword">new</span> Message(data);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Sending message: <span class="subst">$&#123;message.getData()&#125;</span>`</span>);</span><br><span class="line">      client.sendEvent(message, printResultFor(<span class="string">'send'</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">client.open(connectCallback);</span><br></pre></td></tr></table></figure><h3 id="3-服务器端接收消息"><a href="#3-服务器端接收消息" class="headerlink" title="3. 服务器端接收消息"></a>3. 服务器端接收消息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventHubClient = <span class="built_in">require</span>(<span class="string">'azure-event-hubs'</span>).Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectionString = <span class="string">'HostName=[修改连接主机];SharedAccessKeyName=iothubowner;SharedAccessKey=[修改连接密钥]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> printError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> printMessage = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received: '</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(message.body));</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(message).forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, message[x]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = EventHubClient.fromConnectionString(connectionString);</span><br><span class="line"></span><br><span class="line">client.open()</span><br><span class="line">    .then(client.getPartitionIds.bind(client))</span><br><span class="line">    .then(<span class="function"><span class="params">partitionIds</span> =&gt;</span> partitionIds.map(<span class="function"><span class="params">partitionId</span> =&gt;</span> client.createReceiver(<span class="string">'$Default'</span>, partitionId, &#123; <span class="attr">startAfterTime</span>: <span class="built_in">Date</span>.now()&#125;).then(<span class="function">(<span class="params">receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Created partition receiver: <span class="subst">$&#123;partitionId&#125;</span>`</span>);</span><br><span class="line">      receiver.on(<span class="string">'errorReceived'</span>, printError);</span><br><span class="line">      receiver.on(<span class="string">'message'</span>, printMessage);</span><br><span class="line">    &#125;)))</span><br><span class="line">    .catch(printError);</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>客户端传的<code>properties</code>,在消息体中是<code>message.applicationProperties</code></li><li><code>startAfterTime</code>或<code>startAfterOffset</code>参数来决定启动时间, 可用记录上一次消息的<code>offset</code>/<code>enqueued-time</code>来保证中断重启能够继续从未处理的消息开始读取</li><li><code>message</code>包含的属性如下:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'partitionKey'</span>,</span><br><span class="line">  <span class="string">'body'</span>,</span><br><span class="line">  <span class="string">'enqueuedTimeUtc'</span>,</span><br><span class="line">  <span class="string">'offset'</span>,</span><br><span class="line">  <span class="string">'properties'</span>,</span><br><span class="line">  <span class="string">'applicationProperties'</span>,</span><br><span class="line">  <span class="string">'sequenceNumber'</span>,</span><br><span class="line">  <span class="string">'annotations'</span>,</span><br><span class="line">  <span class="string">'systemProperties'</span> ]</span><br></pre></td></tr></table></figure><p>消息体示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Message received:</span><br><span class="line">partitionKey undefined</span><br><span class="line">body &#123; deviceId: <span class="string">'myFirstNodeDevice'</span>, windSpeed: 10.51685587945142 &#125;</span><br><span class="line">enqueuedTimeUtc 2017-06-13T01:21:02.519Z</span><br><span class="line">offset 73240</span><br><span class="line">properties undefined</span><br><span class="line">applicationProperties &#123; asdf: <span class="string">'asdfz'</span> &#125;</span><br><span class="line">sequenceNumber 182</span><br><span class="line">annotations &#123; <span class="string">'x-opt-sequence-number'</span>: 182,</span><br><span class="line">  <span class="string">'x-opt-offset'</span>: <span class="string">'73240'</span>,</span><br><span class="line">  <span class="string">'x-opt-enqueued-time'</span>: 2017-06-13T01:21:02.519Z,</span><br><span class="line">  <span class="string">'iothub-connection-device-id'</span>: <span class="string">'myFirstNodeDevice'</span>,</span><br><span class="line">  <span class="string">'iothub-connection-auth-method'</span>: <span class="string">'&#123; "scope": "device", "type": "sas", "issuer": "iothub" &#125;'</span>,</span><br><span class="line">  <span class="string">'iothub-connection-auth-generation-id'</span>: <span class="string">'xxxxxxx'</span>,</span><br><span class="line">  <span class="string">'iothub-enqueuedtime'</span>: 2017-06-13T01:21:02.786Z,</span><br><span class="line">  <span class="string">'iothub-message-source'</span>: <span class="string">'Telemetry'</span> &#125;</span><br><span class="line">systemProperties undefined</span><br></pre></td></tr></table></figure><h2 id="配置路由-需要Event-Hubs"><a href="#配置路由-需要Event-Hubs" class="headerlink" title="配置路由(需要Event Hubs)"></a>配置路由(需要Event Hubs)</h2><h3 id="1-创建Event-Hubs"><a href="#1-创建Event-Hubs" class="headerlink" title="1. 创建Event Hubs"></a>1. 创建Event Hubs</h3><h3 id="2-从事件中心创建实体"><a href="#2-从事件中心创建实体" class="headerlink" title="2. 从事件中心创建实体"></a>2. 从事件中心创建实体</h3><p><img src="https://user-images.githubusercontent.com/1890238/27019465-566b06d4-4efe-11e7-8a74-240c0c523ac4.png" alt="eventhubs-entities"></p><h3 id="3-获取连接字符串"><a href="#3-获取连接字符串" class="headerlink" title="3. 获取连接字符串"></a>3. 获取连接字符串</h3><p>点击进入已创建的实体</p><p><img src="https://user-images.githubusercontent.com/1890238/27019487-89f17e8e-4efe-11e7-815c-c3d62a3213ef.png" alt="eventhubs-key"></p><p>不要从别处获得连接字符串,因为可能无法连接. 最终获得的连接字符串应当包含<code>EntityPath</code>字段,类似:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Endpoint=sb://xxxx.servicebus.chinacloudapi.cn/;SharedAccessKeyName=iothubroutes_xxxx;SharedAccessKey=xxxx;EntityPath=xxxx</span><br></pre></td></tr></table></figure><h3 id="4-创建Endpoint"><a href="#4-创建Endpoint" class="headerlink" title="4. 创建Endpoint"></a>4. 创建Endpoint</h3><p><img src="https://user-images.githubusercontent.com/1890238/27019555-23edcb5a-4eff-11e7-89e6-57f88d241612.png" alt="iothub-endpoints"></p><p>将 Event Hubs 里的事件关联到 IoT Hub</p><h3 id="5-创建路由"><a href="#5-创建路由" class="headerlink" title="5. 创建路由"></a>5. 创建路由</h3><p><img src="https://user-images.githubusercontent.com/1890238/27019570-5238cd52-4eff-11e7-932f-78a8a97d0246.png" alt="iothub-route"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="1-修改刚才的发送示例"><a href="#1-修改刚才的发送示例" class="headerlink" title="1. 修改刚才的发送示例"></a>1. 修改刚才的发送示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clientFromConnectionString = <span class="built_in">require</span>(<span class="string">'azure-iot-device-mqtt'</span>).clientFromConnectionString;</span><br><span class="line"><span class="keyword">const</span> Message = <span class="built_in">require</span>(<span class="string">'azure-iot-device'</span>).Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectionString = <span class="string">'HostName=[修改连接主机];DeviceId=[deviceID];SharedAccessKey=[连接密钥]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = clientFromConnectionString(connectionString);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printResultFor</span>(<span class="params">op</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">printResult</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;op&#125;</span> error: <span class="subst">$&#123;err.toString()&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (res) <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;op&#125;</span> status: <span class="subst">$&#123;res.constructor.name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connectCallback = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Could not connect: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Client connected'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a message and send it to the IoT Hub every second</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> windSpeed = <span class="number">10</span> + (<span class="built_in">Math</span>.random() * <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">deviceId</span>: <span class="string">'myFirstNodeDevice'</span>, windSpeed &#125;);</span><br><span class="line">      <span class="keyword">const</span> message = <span class="keyword">new</span> Message(data);</span><br><span class="line">      <span class="comment">// 随机发送到路由或默认事件上</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()) === <span class="number">1</span>) &#123;</span><br><span class="line">        message.properties.add(<span class="string">'route'</span>, <span class="string">'test'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Sending message: <span class="subst">$&#123;message.getData()&#125;</span>`</span>);</span><br><span class="line">      client.sendEvent(message, printResultFor(<span class="string">'send'</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">client.open(connectCallback);</span><br></pre></td></tr></table></figure><h4 id="2-IoT-Hub-侦听启动"><a href="#2-IoT-Hub-侦听启动" class="headerlink" title="2. IoT Hub 侦听启动"></a>2. IoT Hub 侦听启动</h4><p>无需修改,直接启动</p><h4 id="3-Event-Hubs-侦听启动"><a href="#3-Event-Hubs-侦听启动" class="headerlink" title="3. Event Hubs 侦听启动"></a>3. Event Hubs 侦听启动</h4><p>复制 IoT Hub 侦听源码,修改连接字符串:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventHubClient = <span class="built_in">require</span>(<span class="string">'azure-event-hubs'</span>).Client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const connectionString = 'HostName=[修改连接主机];SharedAccessKeyName=iothubowner;SharedAccessKey=[修改连接密钥]';</span></span><br><span class="line"><span class="keyword">const</span> connectionString = <span class="string">'Endpoint=[sb://修改连接主机.servicebus.chinacloudapi.cn/];SharedAccessKeyName=[修改连接策略];SharedAccessKey=[x修改连接密钥];EntityPath=[事件实体]'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> printError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> printMessage = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received: '</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(message.body));</span><br><span class="line">  <span class="built_in">console</span>.log(message);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = EventHubClient.fromConnectionString(connectionString);</span><br><span class="line"></span><br><span class="line">client.open()</span><br><span class="line">    .then(client.getPartitionIds.bind(client))</span><br><span class="line">    .then(<span class="function"><span class="params">partitionIds</span> =&gt;</span> partitionIds.map(<span class="function"><span class="params">partitionId</span> =&gt;</span> client.createReceiver(<span class="string">'$Default'</span>, partitionId, &#123; <span class="attr">startAfterTime</span>: <span class="built_in">Date</span>.now()&#125;).then(<span class="function">(<span class="params">receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Created partition receiver: <span class="subst">$&#123;partitionId&#125;</span>`</span>);</span><br><span class="line">      receiver.on(<span class="string">'errorReceived'</span>, printError);</span><br><span class="line">      receiver.on(<span class="string">'message'</span>, printMessage);</span><br><span class="line">    &#125;)))</span><br><span class="line">    .catch(printError);</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><ul><li>发送到默认路由的,只能被IoT Hub侦听应用捕获.</li><li>发送到刚才配置的测试路由的,只能被Event Hubs侦听应用捕获.</li></ul><p>至此,完成路由转发.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;IOT Hub应用实际开发过程中的一些注意细节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建设备: &lt;a href=&quot;https://www.npmjs.com/package/azure-iothub&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/azure-iothub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IoT Hub(基于Event Hubs)消息管理: &lt;a href=&quot;https://www.npmjs.com/package/azure-event-hubs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/azure-event-hubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发调试工具: &lt;a href=&quot;https://www.npmjs.com/package/iothub-explorer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/iothub-explorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简单发送接收示例&quot;&gt;&lt;a href=&quot;#简单发送接收示例&quot; class=&quot;headerlink&quot; title=&quot;简单发送接收示例&quot;&gt;&lt;/a&gt;简单发送接收示例&lt;/h2&gt;&lt;h3 id=&quot;1-注册设备&quot;&gt;&lt;a href=&quot;#1-注册设备&quot; class=&quot;headerlink&quot; title=&quot;1. 注册设备&quot;&gt;&lt;/a&gt;1. 注册设备&lt;/h3&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="azure" scheme="http://blog.airdwing.com/tags/azure/"/>
    
      <category term="iothub" scheme="http://blog.airdwing.com/tags/iothub/"/>
    
      <category term="eventhubs" scheme="http://blog.airdwing.com/tags/eventhubs/"/>
    
  </entry>
  
  <entry>
    <title>Willin: Azure Node.js Blob文件上传</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-azure-storage-nodejs/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-azure-storage-nodejs/</id>
    <published>2017-06-07T10:33:12.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>对官方文档一些需要额外注意的细节整理</p></blockquote><p>azure-storage官方文档: <a href="http://azure.github.io/azure-storage-node/" target="_blank" rel="noopener">http://azure.github.io/azure-storage-node/</a></p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>有3种方式(文档中未提及):</p><a id="more"></a><h3 id="1-通过环境变量"><a href="#1-通过环境变量" class="headerlink" title="1. 通过环境变量"></a>1. 通过环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AZURE_STORAGE_CONNECTION_STRING=<span class="string">"valid storage connection string"</span> node app.js</span><br></pre></td></tr></table></figure><p>应用程序内:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> azure = <span class="built_in">require</span>(<span class="string">'azure-storage'</span>);</span><br><span class="line"><span class="keyword">const</span> blobService = azure.createBlobService();</span><br><span class="line"><span class="comment">// code here</span></span><br></pre></td></tr></table></figure><h3 id="2-连接字符串"><a href="#2-连接字符串" class="headerlink" title="2.连接字符串"></a>2.连接字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> azure = <span class="built_in">require</span>(<span class="string">'azure-storage'</span>);</span><br><span class="line"><span class="keyword">const</span> blobService = azure.createBlobService(<span class="string">'connectionString'</span>); <span class="comment">// 类似: DefaultEndpointsProtocol=https;AccountName=*****;AccountKey=*****;EndpointSuffix=*****.core.chinacloudapi.cn</span></span><br><span class="line"><span class="comment">// code here</span></span><br></pre></td></tr></table></figure><h3 id="3-账号-密钥"><a href="#3-账号-密钥" class="headerlink" title="3.账号+密钥"></a>3.账号+密钥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> azure = <span class="built_in">require</span>(<span class="string">'azure-storage'</span>);</span><br><span class="line"><span class="keyword">const</span> blobService = azure.createBlobService(<span class="string">'storageAccount'</span>, <span class="string">'storageAccessKey'</span>, <span class="string">'storageHost'</span>); </span><br><span class="line"><span class="comment">// code here</span></span><br></pre></td></tr></table></figure><h2 id="上传示例"><a href="#上传示例" class="headerlink" title="上传示例"></a>上传示例</h2><p>因为POST请求接收到的大部分是Stream.所以采用Sream的方式上传.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// azure.js</span></span><br><span class="line"><span class="keyword">const</span> azure = <span class="built_in">require</span>(<span class="string">'azure-storage'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getDefer &#125; = <span class="built_in">require</span>(<span class="string">'@dwing/common'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blobService = azure.createBlobService(<span class="string">'accountName'</span>, <span class="string">'accessKey'</span>, <span class="string">'host'</span>);</span><br><span class="line"></span><br><span class="line">exports.createBlockBlobFromStream = <span class="function">(<span class="params">container, filename, blob</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> deferred = getDefer();</span><br><span class="line">  blob.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">    deferred.reject(err);</span><br><span class="line">  &#125;);</span><br><span class="line">  blob.pipe(blobService.createWriteStreamToBlockBlob(container, filename));</span><br><span class="line">  blob.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    deferred.resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; createBlockBlobFromStream &#125; = <span class="built_in">require</span>(<span class="string">'./azure'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stream = fs.createReadStream(path.join(__dirname, <span class="string">'/testfile'</span>));</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> createBlockBlobFromStream(<span class="string">'container'</span>, <span class="string">'filename'</span>, stream);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>在 AirX 项目中的实际使用:</p><p><a href="https://github.com/AirDwing/node-airx-sdk" target="_blank" rel="noopener">https://github.com/AirDwing/node-airx-sdk</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SDK = <span class="built_in">require</span>(<span class="string">'@airx/sdk'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sdk = <span class="keyword">new</span> SDK(&#123;</span><br><span class="line">  SecretId: <span class="string">'xxxx'</span>,</span><br><span class="line">  SecretKey: <span class="string">'xxxx'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> sdk.upload(&#123;</span><br><span class="line">    auth: <span class="string">'xxxx'</span>,</span><br><span class="line">    type: <span class="string">'orgverify'</span>,</span><br><span class="line">    file: fs.createReadStream(<span class="string">'PATH/TO/xxx.jpg'</span>) <span class="comment">// 注意这里, 本地文件可以用 path.join 拼装地址,或者直接用Stream</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;对官方文档一些需要额外注意的细节整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;azure-storage官方文档: &lt;a href=&quot;http://azure.github.io/azure-storage-node/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://azure.github.io/azure-storage-node/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;p&gt;有3种方式(文档中未提及):&lt;/p&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="azure" scheme="http://blog.airdwing.com/tags/azure/"/>
    
      <category term="storage" scheme="http://blog.airdwing.com/tags/storage/"/>
    
      <category term="oss" scheme="http://blog.airdwing.com/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>Willin: Azure WebApp Node.js</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-azure-webapp-nodejs/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-azure-webapp-nodejs/</id>
    <published>2017-06-06T02:33:12.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>对官方文档一些需要额外注意的细节整理</p></blockquote><p><a href="https://www.azure.cn/documentation/articles/web-sites-nodejs-develop-deploy-mac/" target="_blank" rel="noopener">在 Azure App Service 中创建 Node.js Web 应用</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-启动项-npm-start"><a href="#1-启动项-npm-start" class="headerlink" title="1. 启动项 npm start"></a>1. 启动项 npm start</h3><p>必须以<code>node</code>命令执行,且必须以<code>node</code>命令打头,如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node PATH/app.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能以<code>cli</code>工具执行,像这样的是无法执行的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"gitbook serve"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>还有这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"NODE_ENV=production node PATH/app.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-不能指定端口号"><a href="#2-不能指定端口号" class="headerlink" title="2. 不能指定端口号"></a>2. 不能指定端口号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">3000</span>); <span class="comment">// 抱歉,发布后无法访问</span></span><br></pre></td></tr></table></figure><p>必须引用<code>process.env.PORT</code>,像这样写:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.listen(process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 部署后传入绑定的PORT类似: \\.\pipe\69b6d648-e61e-4da2-9de5-fb797348d3fa</span></span><br></pre></td></tr></table></figure><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p><code>NODE_ENV</code> 或者其他环境变量的配置位于:</p><blockquote><p>WebApp -&gt; 应用程序设置 -&gt; 应用设置</p></blockquote><p><img src="https://cloud.githubusercontent.com/assets/1890238/26770714/ac0ede34-49eb-11e7-8850-9c9740dc48d2.png" alt=""></p><h2 id="指定node-npm版本"><a href="#指定node-npm版本" class="headerlink" title="指定node/npm版本"></a>指定node/npm版本</h2><p><code>package.json</code>中添加:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"engines"</span>: &#123;</span><br><span class="line">  <span class="string">"node"</span>: <span class="string">"&gt;= 8.0.0"</span>,</span><br><span class="line">  <span class="string">"npm"</span>: <span class="string">"&gt;= 5.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;对官方文档一些需要额外注意的细节整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.azure.cn/documentation/articles/web-sites-nodejs-develop-deploy-mac/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在 Azure App Service 中创建 Node.js Web 应用&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;h3 id=&quot;1-启动项-npm-start&quot;&gt;&lt;a href=&quot;#1-启动项-npm-start&quot; class=&quot;headerlink&quot; title=&quot;1. 启动项 npm start&quot;&gt;&lt;/a&gt;1. 启动项 npm start&lt;/h3&gt;&lt;p&gt;必须以&lt;code&gt;node&lt;/code&gt;命令执行,且必须以&lt;code&gt;node&lt;/code&gt;命令打头,如:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;node PATH/app.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不能以&lt;code&gt;cli&lt;/code&gt;工具执行,像这样的是无法执行的:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gitbook serve&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dev" scheme="http://blog.airdwing.com/categories/Dev/"/>
    
    
      <category term="node.js" scheme="http://blog.airdwing.com/tags/node-js/"/>
    
      <category term="azure" scheme="http://blog.airdwing.com/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>Willin: 贡献文章</title>
    <link href="http://blog.airdwing.com/posts/2017/willin-contribute-posts/"/>
    <id>http://blog.airdwing.com/posts/2017/willin-contribute-posts/</id>
    <published>2017-05-27T02:33:12.000Z</published>
    <updated>2019-01-04T04:49:33.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何正确地贡献文章</p></blockquote><h2 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h2><p>Fork项目： <a href="https://github.com/AirDwing/AirDwing.github.io" target="_blank" rel="noopener">https://github.com/AirDwing/AirDwing.github.io</a></p><p>然后<code>git clone</code>到本地。</p><p>Clone到本地之后，需要添加远程源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add dwing git@github.com:AirDwing/AirDwing.github.io.git</span><br></pre></td></tr></table></figure><a id="more"></a><p>和切换到源码分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>以后每次发表新文章之前，通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull dwing <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>进行本地代码的更新。</p><p>Push到自己的项目后，提交一个<code>Pull Request</code>，合并完成即自动部署。</p><h2 id="2-本地调试"><a href="#2-本地调试" class="headerlink" title="2.本地调试"></a>2.本地调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br><span class="line">npm install</span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure><h2 id="3-撰写文章"><a href="#3-撰写文章" class="headerlink" title="3.撰写文章"></a>3.撰写文章</h2><p>路径位于：<code>source/_posts/</code>目录下。</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>1.文件名： <code>[日期]-[作者]-[文章标题].md</code></p><p>全英文小写和数字，所有连接用 <code>-</code> 表示，禁止使用中文和其他符号如 <code>_</code>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-06-03-author-my-post-title.md</span><br></pre></td></tr></table></figure><p>2.内容： <code>Markdown</code></p><p>推荐使用英文撰写，或英文撰写提供中文翻译。</p><p>2.1摘要分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>2.2居中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">如何正确地贡献文章</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><p>其他特性自己挖掘，参考 <code>Markdown</code> 语法 和 <code>Hexo</code> 语法。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;如何正确地贡献文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-版本控制&quot;&gt;&lt;a href=&quot;#1-版本控制&quot; class=&quot;headerlink&quot; title=&quot;1. 版本控制&quot;&gt;&lt;/a&gt;1. 版本控制&lt;/h2&gt;&lt;p&gt;Fork项目： &lt;a href=&quot;https://github.com/AirDwing/AirDwing.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/AirDwing/AirDwing.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后&lt;code&gt;git clone&lt;/code&gt;到本地。&lt;/p&gt;
&lt;p&gt;Clone到本地之后，需要添加远程源：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add dwing git@github.com:AirDwing/AirDwing.github.io.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notice" scheme="http://blog.airdwing.com/categories/Notice/"/>
    
    
      <category term="git" scheme="http://blog.airdwing.com/tags/git/"/>
    
      <category term="hexo" scheme="http://blog.airdwing.com/tags/hexo/"/>
    
  </entry>
  
</feed>
